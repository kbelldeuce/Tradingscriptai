app Tradingscriptsai {
  wasp: {
    version: "^0.13.0"
  },
  title: "Tradingscriptsai",
  client: {
    rootComponent: import { Layout } from "@src/Layout.jsx",
  },
  db: {
    prisma: {
      clientPreviewFeatures: ["extendedWhereUnique"]
    }
  },
  auth: {
    userEntity: User,
    methods: {
      usernameAndPassword: {}
    },
    onAuthFailedRedirectTo: "/login",
    onAuthSucceededRedirectTo: "/"
  }
}

route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import Login from "@src/pages/auth/Login.jsx"
}
route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  component: import Signup from "@src/pages/auth/Signup.jsx"
}

entity User {=psl
    id         Int        @id @default(autoincrement())
    strategies Strategy[]
psl=}

entity Strategy {=psl
    id          Int    @id @default(autoincrement())
    description String
    script      String
    user        User   @relation(fields: [userId], references: [id])
    userId      Int
psl=}

action createStrategy {
  fn: import { createStrategy } from "@src/actions.js",
  entities: [User, Strategy]
}

action updateStrategy {
  fn: import { updateStrategy } from "@src/actions.js",
  entities: [Strategy]
}

action deleteStrategy {
  fn: import { deleteStrategy } from "@src/actions.js",
  entities: [Strategy]
}

query getStrategies {
  fn: import { getStrategies } from "@src/queries.js",
  entities: [User, Strategy]
}

query getStrategy {
  fn: import { getStrategy } from "@src/queries.js",
  entities: [Strategy]
}

route DashboardRoute { path: "/", to: DashboardPage }
page DashboardPage {
  component: import DashboardPage from "@src/pages/Dashboard.jsx",
  authRequired: true
}

route StrategyRoute { path: "/strategy/:strategyId", to: StrategyPage }
page StrategyPage {
  component: import StrategyPage from "@src/pages/Strategy.jsx",
  authRequired: true
}

route NewStrategyRoute { path: "/new-strategy", to: NewStrategyPage }
page NewStrategyPage {
  component: import NewStrategyPage from "@src/pages/NewStrategy.jsx",
  authRequired: true
}